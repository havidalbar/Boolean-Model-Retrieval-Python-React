version: '3.7'

services:
  db:
    container_name: db_container
    image: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /data/postgres
    volumes:
       - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped
  
  dbadmin:
    container_name: dbadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${DBADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${DBADMIN_DEFAULT_PASSWORD}
    volumes:
       - pgadmin:/root/.pgadmin
    ports:
      - "${DBADMIN_PORT}:80"
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - db
  
  frontend:
    container_name: frontend_container
    build: ./frontend
    tty: true
    ports:
      - "3000:3000"
    volumes:
      - './frontend/:/app'
      - 'frontend:/app/node_modules'
    networks:
      - app-network
  
  server:
    container_name: server_container
    build: ./server
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "8080:8080"
    volumes:
      - ./server/:/app
    command: gunicorn server.app:app -b :8080 --worker-class aiohttp.worker.GunicornWebWorker --reload
    networks:
      - app-network
    depends_on:
      - db

networks:
  app-network:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  frontend: